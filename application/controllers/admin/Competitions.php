<?phpif(!defined('BASEPATH')) exit('No direct script acces allowed');require_once('Base_controller.php');/** * @author 		Mihaela Anghel <mihaela.anghel@webdesignsoft.ro> * @copyright 	Copyright (c) 2009, IXEDO DOTCOM SRL * @link 		http://www.webdesignsoft.com; http://www.webdesignsoft.ro; http://www.ixedo.ro;		 */class Competitions extends Base_controller {					/**	 * Constructor	 */	function __construct()	{		parent::__construct();		$this->load->model("competitions_model");			$this->lang->load("admin/competitions",$this->admin_default_lang);		$this->competition_types = array(	"national" 		=> $this->lang->line("competition_type_national"),											"international" => $this->lang->line("competition_type_international"),											);													$this->prize_types = array(	"prize" 			=> $this->lang->line("prize_type_prize"),									"special_diplama" 	=> $this->lang->line("prize_type_special_diplama"),									);			$this->status_options = array(	"open" 			=> "Deschisa",										"close" 		=> "Inchisa",										);												//set access		//=========================================================								$this->admin_access = parent::set_access(get_class());		}		/**	 * List competitions	 * 	 * @param int $offset	 */	function index($offset = 0)	{												//controller name		//======================================================				$section_name 	= strtolower(get_class());		$data			= array();		$where 			= " AND lang_id = ".$this->admin_default_lang_id." ";				//delete all		//==================================================================		if(isset($_POST['DeleteSelected']))		{						$aux = 0;			if(isset($_POST["item"]) && count($_POST["item"]))			{				foreach($_POST["item"] as $key=>$competition_id)				{					$this->delete_competition($competition_id, $no_redirect = true);					$aux++;				}			}			$_SESSION["done_message"] = str_replace("{x}", $aux, $this->lang->line("done_message_delete_all"));			header('Location: '.admin_url()."competitions");			die();		}						//SEARCH				//======================================================		/*		//create categories select 				$this->load->model('categories_model');			$this->load->library('tree');		$orderby_ 	= " ORDER BY `order` asc ";			$where_ 	= " AND lang_id = ".$this->admin_default_lang_id." ";			$fields_ 	= " t1.category_id, t1.parent_id, t2.name ";		$categories = $this->categories_model->get_categories($where_,$orderby_,false,false,$fields_);		//make tree				$tree							= new Tree();		$tree->id_field_name		  	= "category_id";		$tree->parent_id_field_name 	= "parent_id";		$tree->input_array 				= $categories;		$categories 					= $tree->create_tree(0);				unset($tree);					$categories_select = array();				foreach($categories as $category)						$categories_select[$category["category_id"]."-".$category["level"]] = $category["name"];		*/				$search_by = array							(	/*array	(	"field_name"	=> "year",										"field_label" 	=> $this->lang->line("competition_year"),										"field_type"	=> "input",										"field_values"	=> array()										),*/																											array	(	"field_name"	=> "name",										"field_label" 	=> $this->lang->line("competition_name"),										"field_type"	=> "input",										"field_values"	=> array()										),								array	(	"field_name"	=> "status",										"field_label" 	=> $this->lang->line("status"),										"field_type"	=> "checkbox",										"field_values"	=> array("1" => $this->lang->line("active"), "0" => $this->lang->line("inactive"))										),																																											);						//set search session		if(isset($_POST["Search"]))				{			$_SESSION[$section_name]["search_by"] = $_POST;			header("Location: ".admin_url()."competitions");			die();		}					//reset search session			if(isset($_POST["Reset"]) && isset($_SESSION[$section_name]["search_by"]))				{			unset($_SESSION[$section_name]["search_by"]);			header("Location: ".admin_url()."competitions");			die();					}				//create search query				if(isset($_SESSION[$section_name]["search_by"]))		{								$search = $_SESSION[$section_name]["search_by"];											if(isset($search["year"]) && !empty($search["year"])) 				$where .= " AND t1.year = '".$search["year"]."' ";										if(isset($search["status"]) && !empty($search["status"])) 			{					$where .= " AND ( ";				foreach($search["status"] as $k => $value)					{								if(isset($search["status"][$k]))					{											if($k > 0)							$where .= " OR ";						$where 	.= " active = '".$search["status"][$k]."' ";											}					}														$where .= " ) ";												}													if(isset($search["name"]) && !empty($search["name"])) 			{				$where .= " AND LOWER(t2.name) LIKE '%".strtolower($this->db->escape_like_str($search["name"]))."%' ";													}											}																												//sort		//======================================================				 			$sort_fields 			= array("t1.competition_id", "t1.order", "t1.active");		$default_sort_field 	= "t1.competition_id"; 		$default_sort_dir 		= "desc";									$sort_label = $this->global_admin->set_sort_sesssion($sort_fields, $default_sort_field, $default_sort_dir, $section_name);				if(isset($_SESSION[$section_name]["sort_field"]))					$orderby = "ORDER BY ".$_SESSION[$section_name]["sort_field"]." ".$_SESSION[$section_name]["sort_order"];		else 			$orderby = "ORDER BY ".$default_sort_field." ".$default_sort_dir;					//pagination		//======================================================								$rows 					= $this->competitions_model->get_competitions($where,false,false,false,"count(t1.competition_id) as nr");				$total_rows 			= $rows[0]["nr"];									$this->load->library("pagination");				$config["base_url"] 	= admin_url()."competitions/index";		$config["total_rows"]	= $total_rows;						if(isset($_SESSION[$section_name]["per_page"]))				$config["per_page"] = $_SESSION[$section_name]["per_page"];		else														$config["per_page"] = $this->setting->item("default_admin_number_per_page");									$config["uri_segment"]	= 3;		$config["cur_page"]		= $offset;				$config["first_link"]	= $this->lang->line("first");				$config["last_link"] 	= $this->lang->line("last");											$this->pagination->initialize($config);				$pagination = $this->pagination->create_links();						//get list		//======================================================			$competitions = $this->competitions_model->get_competitions($where,$orderby,$config["per_page"],$offset);								//get extra info		//======================================================		$this->load->model('categories_model');			$this->load->model('age_categories_model');				foreach($competitions as $key => $competition)		{			//get number of prizes					$where 							= "AND competition_id = ".$competition['competition_id']." AND lang_id = ".$this->admin_default_lang_id." ";						$prizes 						= $this->competitions_model->get_prizes($where,false,false,false,"count(*) as numrows");			$competitions[$key]['prizes_number']= $prizes[0]["numrows"];						//get number of participants					$where 							= "AND competition_id = ".$competition['competition_id']." ";						$participants 					= $this->competitions_model->get_participants($where,false,false,false,"count(*) as numrows");			$competitions[$key]['participants_number']= $participants[0]["numrows"];									//get categories 			//=========================================================				$where 								= " AND lang_id = ".$this->admin_default_lang_id." 													AND t1.category_id IN (SELECT category_id FROM competitions2categories WHERE competition_id = ".$competition['competition_id'].")";			$orderby 							= "ORDER BY `order` asc";							$categories 						= $this->categories_model->get_categories($where,$orderby,false,false,false);					$competitions[$key]["categories"] 	= $categories;						//get age_categories 			//=========================================================				$where 								= " AND lang_id = ".$this->admin_default_lang_id." 													AND t1.age_category_id IN (SELECT age_category_id FROM competitions2age_categories WHERE competition_id = ".$competition['competition_id'].")";			$orderby 							= "ORDER BY `order` asc";							$age_categories 						= $this->age_categories_model->get_age_categories($where,$orderby,false,false,false);					$competitions[$key]["age_categories"] 	= $age_categories;						}						//number of results to display		//====================================================== 		$display_from 		=	(count($competitions)) ? $offset+1 : 0; 		$display_to 		= 	$offset + count($competitions);		$display_total 		= 	$total_rows;				$results_displayed  = 	$this->lang->line("results")." ".$display_from." - ".$display_to." ".$this->lang->line('from')." ".$display_total;										//send data to view		//======================================================		$data["section_name"]		= $section_name;		$data['search_by']			= $search_by;					$data['sort_label'] 		= $sort_label;				$data["per_page_select"]	= $this->global_admin->show_per_page_select($section_name,$config["per_page"]);					$data["results_displayed"] 	= $results_displayed;		 									$data["pagination"]			= $pagination;				$data['competitions'] 			= $competitions;				$data['body'] 				= 'admin/competitions/list_competitions';		$this->load->view('admin/template',$data);						}		/**	 * Add competition	 */	function add_competition()	{				$data = array();				//get languages active in admin		//=========================================================		$this->load->model("languages_model");		$languages = $this->languages_model->get_languages("AND active_admin = '1' ", " ORDER BY default_admin DESC, `order` ASC" ); 				//determine whether to display the language on labels		//=========================================================		if(count($languages) > 1) 			$show_label_language = true;		else 				$show_label_language = false;				//add form		//=========================================================		if(isset($_POST["Add"]))		{						//form validation			//=========================================================					$this->load->library('form_validation');									foreach($languages as $language)			{								//if we have more than one language, then make a string with lang code label				$label_language = "";				if($show_label_language) 					$label_language = " (".$language["code"].")";								 				$this->form_validation->set_rules("name[".$language["lang_id"]."]",				$this->lang->line("competition_name").$label_language,				"trim|required");				$this->form_validation->set_rules("description[".$language["lang_id"]."]",		$this->lang->line("competition_description").$label_language,		"trim");				$this->form_validation->set_rules("theme_name[".$language["lang_id"]."]",		$this->lang->line("competition_theme_name").$label_language,		"trim|required");				$this->form_validation->set_rules("theme_description[".$language["lang_id"]."]",$this->lang->line("competition_theme_description").$label_language,	"trim");				$this->form_validation->set_rules("rules[".$language["lang_id"]."]",			$this->lang->line("competition_rules").$label_language,				"trim|required");				$this->form_validation->set_rules("code_language[".$language["lang_id"]."]",	$this->lang->line("competition_code_language").$label_language,		"trim");				$this->form_validation->set_rules("email_content[".$language["lang_id"]."]",	$this->lang->line("competition_email_content").$label_language,		"trim|required");				$this->form_validation->set_rules("popup_info[".$language["lang_id"]."]",	    $this->lang->line("competition_email_content").$label_language,		"trim");				$this->form_validation->set_rules("meta_title[".$language["lang_id"]."]",		$this->lang->line("meta_title").$label_language,					"trim");				$this->form_validation->set_rules("meta_description[".$language["lang_id"]."]",	$this->lang->line("meta_description").$label_language,				"trim");				$this->form_validation->set_rules("meta_keywords[".$language["lang_id"]."]",	$this->lang->line("meta_keywords").$label_language,					"trim");												}				$this->form_validation->set_rules("type",											$this->lang->line("competition_type"),						"trim|required");												$this->form_validation->set_rules("category_ids[]",									$this->lang->line("competition_category"),					"trim|required");			$this->form_validation->set_rules("age_category_ids[]",								$this->lang->line("competition_age_category"),				"trim|required");			$this->form_validation->set_rules("start_registration_date",						$this->lang->line("competition_start_registration_date"),	"trim|required");			$this->form_validation->set_rules("end_registration_date",							$this->lang->line("competition_end_registration_date"),		"trim|required");			//$this->form_validation->set_rules("end_submit_project_date",						$this->lang->line("competition_end_submit_project_date"),	"trim|required");			$this->form_validation->set_rules("show_results_date",								$this->lang->line("competition_show_results_date"),			"trim|required");			$this->form_validation->set_rules("default_count_participants",						$this->lang->line("competition_default_count_participants"),"trim|required");			$this->form_validation->set_rules("default_count_schools",							$this->lang->line("competition_default_count_schools"),		"trim|required");			$this->form_validation->set_rules("default_count_countries",						$this->lang->line("competition_default_count_countries"),	"trim|required");			$this->form_validation->set_rules("popup_info_active",						        $this->lang->line("competition_popup_info_active"),	         "trim|required");			$this->form_validation->set_rules("active",											$this->lang->line("status"),								"trim|required");						$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();															//if form valid			//=========================================================				if($form_is_valid)			{								/*				$where_exist = " AND t2.name		= '".$_POST["name"][$this->admin_default_lang_id]."'								 AND t2.lang_id 	= ".$this->admin_default_lang_id." 							   ";									$exist 		= $this->competitions_model->get_competitions($where_exist);				*/;				$exist		= false;								if($exist)									$data["error_message"] = $this->lang->line("competition_exist");								else 				{					//values									$values = array(	"type"							=> $_POST["type"],																				"start_registration_date" 		=> $_POST["start_registration_date"],										"end_registration_date" 		=> $_POST["end_registration_date"],										"end_submit_project_date" 		=> $_POST["end_registration_date"],//$_POST["end_submit_project_date"],										"show_results_date" 			=> $_POST["show_results_date"],										"default_count_participants" 	=> $_POST["default_count_participants"],										"default_count_schools" 		=> $_POST["default_count_schools"],										"default_count_countries" 		=> $_POST["default_count_countries"],					                    "popup_info_active" 		    => $_POST["popup_info_active"],										"active" 						=> $_POST["active"],										"add_date"						=> date("Y-m-d H:i:s"),									);										//details									foreach($languages as $language)										{						$url_key[$language["lang_id"]] 		= url_key($_POST["name"][$language["lang_id"]],"-");						$add_date[$language["lang_id"]] 	= date("Y-m-d H:i:s");						$lang_ids[$language["lang_id"]]		= $language["lang_id"];																}														$details = array(   "name" 				=> $_POST["name"],										"description" 		=> $_POST["description"],										"theme_name" 		=> $_POST["theme_name"],										"theme_description"	=> $_POST["theme_description"],										"rules" 			=> $_POST["rules"],										"code_language" 	=> $_POST["code_language"],										"email_content" 	=> $_POST["email_content"],					                    "popup_info" 	    => $_POST["popup_info"],										"meta_title" 		=> $_POST["meta_title"],										"meta_description" 	=> $_POST["meta_description"],										"meta_keywords" 	=> $_POST["meta_keywords"],										"url_key" 			=> $url_key,										"add_date"			=> $add_date,										"lang_id"			=> $lang_ids										);											//insert									$competiotion_id = $this->competitions_model->add_competition($values, $details);										//add categories					if(isset($_POST["category_ids"]))						foreach($_POST["category_ids"] as $category_id)					{						//insert						$values = array(	"competition_id" 	=> $competiotion_id,											"category_id" 		=> $category_id										);						$this->db->insert("competitions2categories",$values);											}					//add age_categories					if(isset($_POST["age_category_ids"]))						foreach($_POST["age_category_ids"] as $age_category_id)					{						//insert						$values = array(	"competition_id" 	=> $competiotion_id,											"age_category_id" 	=> $age_category_id										);						$this->db->insert("competitions2age_categories",$values);											}										//done message					$_SESSION["done_message"] = $this->lang->line("done_message_add");										//redirect					//header("Location: ".current_url());					header("Location: ".admin_url().strtolower(get_class()));					die();				}																	}								}			//get age_categories 		//=========================================================			$this->load->model('age_categories_model');			$where 						= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby 					= "ORDER BY `order` asc";						$age_categories 			= $this->age_categories_model->get_age_categories($where,$orderby,false,false,false);				$data["age_categories"] 	= $age_categories;				//get categories 		//=========================================================			$this->load->model('categories_model');			$where 						= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby 					= "ORDER BY `order` asc";						$categories 				= $this->categories_model->get_categories($where,$orderby,false,false,false);				$data["categories"] 		= $categories;		//page title		//=========================================================				$this->page_title = $this->lang->line("add_competition");				//send data to view		//=========================================================				$data["show_label_language"] 	= $show_label_language;		$data["languages"] 				= $languages;				$data["body"] 					= "admin/competitions/add_competition";		$this->load->view("admin/template",$data);			}		/**	 * Edit competition	 * 	 * @param int $competition_id	 */	function edit_competition($competition_id = false)	{							$data = array();			if($competition_id == false) die(); 													//get competition and competition_details		//=========================================================				$competitions = $this->competitions_model->get_just_competitions("AND competition_id = '".$competition_id."'");		if(!$competitions) die();				$competition = $competitions[0];		$array_competition_details  = $this->competitions_model->get_just_competitions_details("AND competition_id = '".$competition_id."'");		foreach($array_competition_details as $array_competition_detail)							foreach($array_competition_detail as $field=>$value)							$competition_details[$field][$array_competition_detail["lang_id"]] = $value;						//get competition category_ids			//=========================================================		$competition["category_ids"] = array();				$this->db->where(array("competition_id" => $competition_id));		$query = $this->db->get('competitions2categories');		foreach ($query->result() as $row)					$competition["category_ids"][] = $row->category_id;		//get competition age_category_ids			//=========================================================		$competition["age_category_ids"] = array();				$this->db->where(array("competition_id" => $competition_id));		$query = $this->db->get('competitions2age_categories');		foreach ($query->result() as $row)					$competition["age_category_ids"][] = $row->age_category_id;											//get languages active in admin		//=========================================================		$this->load->model("languages_model");		$languages = $this->languages_model->get_languages("AND active_admin = '1' ", " ORDER BY default_admin DESC, `order` ASC" ); 				//if we have more than one language, then display lang code label		//=========================================================		if(count($languages) > 1) 			$show_label_language = true;		else 				$show_label_language = false;				//edit form		//=========================================================			if(isset($_POST["Edit"]))		{						//form validation			//=========================================================					$this->load->library('form_validation');									foreach($languages as $language)			{								//if we have more than one language, then make a string with lang code label				$label_language = "";				if($show_label_language) 					$label_language = " (".$language["code"].")";								 				$this->form_validation->set_rules("name[".$language["lang_id"]."]",				$this->lang->line("competition_name").$label_language,				"trim|required");				$this->form_validation->set_rules("description[".$language["lang_id"]."]",		$this->lang->line("competition_description").$label_language,		"trim");				$this->form_validation->set_rules("theme_name[".$language["lang_id"]."]",		$this->lang->line("competition_theme_name").$label_language,		"trim|required");				$this->form_validation->set_rules("theme_description[".$language["lang_id"]."]",$this->lang->line("competition_theme_description").$label_language,	"trim");				$this->form_validation->set_rules("rules[".$language["lang_id"]."]",			$this->lang->line("competition_rules").$label_language,				"trim|required");				$this->form_validation->set_rules("code_language[".$language["lang_id"]."]",	$this->lang->line("competition_code_language").$label_language,		"trim");				$this->form_validation->set_rules("email_content[".$language["lang_id"]."]",	$this->lang->line("competition_email_content").$label_language,		"trim|required");				$this->form_validation->set_rules("popup_info[".$language["lang_id"]."]",	    $this->lang->line("competition_email_content").$label_language,		"trim");				$this->form_validation->set_rules("meta_title[".$language["lang_id"]."]",		$this->lang->line("meta_title").$label_language,					"trim");				$this->form_validation->set_rules("meta_description[".$language["lang_id"]."]",	$this->lang->line("meta_description").$label_language,				"trim");				$this->form_validation->set_rules("meta_keywords[".$language["lang_id"]."]",	$this->lang->line("meta_keywords").$label_language,					"trim");												}				$this->form_validation->set_rules("type",											$this->lang->line("competition_type"),						"trim|required");									$this->form_validation->set_rules("category_ids[]",									$this->lang->line("competition_category"),					"trim|required");			$this->form_validation->set_rules("age_category_ids[]",								$this->lang->line("competition_age_category"),				"trim|required");						$this->form_validation->set_rules("start_registration_date",						$this->lang->line("competition_start_registration_date"),	"trim|required");			$this->form_validation->set_rules("end_registration_date",							$this->lang->line("competition_end_registration_date"),		"trim|required");			//$this->form_validation->set_rules("end_submit_project_date",						$this->lang->line("competition_end_submit_project_date"),	"trim|required");			$this->form_validation->set_rules("show_results_date",								$this->lang->line("competition_show_results_date"),			"trim|required");			$this->form_validation->set_rules("default_count_participants",						$this->lang->line("competition_default_count_participants"),"trim|required");			$this->form_validation->set_rules("default_count_schools",							$this->lang->line("competition_default_count_schools"),		"trim|required");			$this->form_validation->set_rules("default_count_countries",						$this->lang->line("competition_default_count_countries"),	"trim|required");			$this->form_validation->set_rules("popup_info_active",						        $this->lang->line("competition_popup_info_active"),	        "trim|required");			$this->form_validation->set_rules("active",											$this->lang->line("status"),								"trim|required");						$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();								//if form valid			//=========================================================			if($form_is_valid)			{																/*				$where_exist = " AND t2.name 		= '".$_POST["name"][$this->admin_default_lang_id]."'								 AND t2.lang_id 	= ".$this->admin_default_lang_id."								 AND t2.competition_id 	!= '".$competition_id."' 							   ";													$exist = $this->competitions_model->get_competitions($where_exist);				*/				$exist = false;								if($exist)					$data["error_message"] = $this->lang->line("competition_exist");				else				{					//values					$values = array(	"type"							=> $_POST["type"],										"start_registration_date" 		=> $_POST["start_registration_date"],										"end_registration_date" 		=> $_POST["end_registration_date"],										"end_submit_project_date" 		=> $_POST["end_registration_date"],//$_POST["end_submit_project_date"],										"show_results_date" 			=> $_POST["show_results_date"],										"default_count_participants" 	=> $_POST["default_count_participants"],										"default_count_schools" 		=> $_POST["default_count_schools"],										"default_count_countries" 		=> $_POST["default_count_countries"],					                    "popup_info_active" 		    => $_POST["popup_info_active"],										"active" 						=> $_POST["active"]																			);										//details									foreach($languages as $language)										{						$url_key[$language["lang_id"]] 		= url_key($_POST["name"][$language["lang_id"]],"-");												$lang_ids[$language["lang_id"]]		= $language["lang_id"];															}														$details = array(   "name" 				=> $_POST["name"],										"description" 		=> $_POST["description"],										"theme_name" 		=> $_POST["theme_name"],										"theme_description"	=> $_POST["theme_description"],										"rules" 			=> $_POST["rules"],											"code_language" 	=> $_POST["code_language"],										"email_content" 	=> $_POST["email_content"],					                    "popup_info" 	    => $_POST["popup_info"],										"meta_title" 		=> $_POST["meta_title"],										"meta_description" 	=> $_POST["meta_description"],										"meta_keywords" 	=> $_POST["meta_keywords"],										"url_key" 			=> $url_key,										"lang_id"			=> $lang_ids																			);											//update									$this->competitions_model->edit_competition($values, $details, $competition_id);										//edit categories					if(isset($_POST["category_ids"]))					{							foreach($_POST["category_ids"] as $category_id)						{							if(!in_array($category_id, $competition["category_ids"]))							{								//insert								$values = array(	"competition_id" 	=> $competition_id,													"category_id" 		=> $category_id												);								$this->db->insert("competitions2categories",$values);								}											}												//delete						$this->db->where("competition_id",$competition_id);						$this->db->where_not_in("category_id", $_POST["category_ids"]);						$this->db->delete("competitions2categories");					}					else					{						//delete						$this->db->where("competition_id",$competition_id);						$this->db->delete("competitions2categories");					}										//edit age_categories					if(isset($_POST["age_category_ids"]))					{							foreach($_POST["age_category_ids"] as $age_category_id)						{							if(!in_array($age_category_id, $competition["age_category_ids"]))							{								//insert								$values = array(	"competition_id" 	=> $competition_id,													"age_category_id" 		=> $age_category_id												);								$this->db->insert("competitions2age_categories",$values);								}											}												//delete						$this->db->where("competition_id",$competition_id);						$this->db->where_not_in("age_category_id", $_POST["age_category_ids"]);						$this->db->delete("competitions2age_categories");					}					else					{						//delete						$this->db->where("competition_id",$competition_id);						$this->db->delete("competitions2age_categories");					}										//done message					$_SESSION["done_message"] = $this->lang->line("done_message_edit");										//redirect					//header("Location: ".current_url());					header("Location: ".admin_url().strtolower(get_class()));					die();				}								 									}								}			//get age_categories 		//=========================================================			$this->load->model('age_categories_model');			$where 						= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby 					= "ORDER BY `order` asc";						$age_categories 			= $this->age_categories_model->get_age_categories($where,$orderby,false,false,false);				$data["age_categories"] 	= $age_categories;				//get categories 		//=========================================================			$this->load->model('categories_model');			$where 						= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby 					= "ORDER BY `order` asc";						$categories 				= $this->categories_model->get_categories($where,$orderby,false,false,false);				$data["categories"] 		= $categories;		//page title		//=========================================================				$this->page_title = $this->lang->line("edit_competition");														//send data to view		//=========================================================		$data["competition"] 				= $competition;		$data["competition_details"] 		= $competition_details;				$data["show_label_language"] 	= $show_label_language;		$data["languages"] 				= $languages;						$data["body"] 					= "admin/competitions/edit_competition";		$this->load->view("admin/template",$data);			}		/**	 * Copy competition	 * 	 * @param int $competition_id	 */	function copy_competition($competition_id = false)	{							if($competition_id == false) die(); 													//get competition and competition_details		//=========================================================				$competitions = $this->competitions_model->get_just_competitions("AND competition_id = '".$competition_id."'");		if(!$competitions) die();				$competition                  = $competitions[0];		$array_competition_details    = $this->competitions_model->get_just_competitions_details("AND competition_id = '".$competition_id."'");		$competition_details          = [];		foreach($array_competition_details as $array_competition_detail)							foreach($array_competition_detail as $field=>$value)							$competition_details[$field][$array_competition_detail["lang_id"]] = $value;						//get competition category_ids			//=========================================================		$category_ids = array();				$this->db->where(array("competition_id" => $competition_id));		$query = $this->db->get('competitions2categories');		foreach ($query->result() as $row)					$category_ids[] = $row->category_id;		//get competition age_category_ids			//=========================================================		$age_category_ids = array();				$this->db->where(array("competition_id" => $competition_id));		$query = $this->db->get('competitions2age_categories');		foreach ($query->result() as $row)					$age_category_ids[] = $row->age_category_id;											//get languages active in admin		//=========================================================		$this->load->model("languages_model");		$languages = $this->languages_model->get_languages("AND active_admin = '1' ", " ORDER BY default_admin DESC, `order` ASC" ); 															//add competition		//=========================================================		//values		$values                           = $competition;				$values["on_home"]                = '0';		$values["status"]                 = 'open';		$values["active"]                 = '0';		//$values["image"]                  = "";		//$values["banner"]                 = "";		//$values["code_language_image"]    = "";		$values["add_date"]               = date("Y-m-d H:i:s");		unset($values["competition_id"]);		unset($values["save_notes_date"]);		unset($values["generate_diplomas_date"]);				//copy image		if($values["image"])		{		    		    $old_path = base_path()."uploads/competitions/".$values["image"];		    if(file_exists($old_path))		    {		        $new_filename     = time().uniqid()."-".$values["image"];		        $new_path         = base_path()."uploads/competitions/".$new_filename;		        		        @copy($old_path, $new_path);		        @chmod($new_path, 0755);		        		        if(file_exists($new_path))		        		            $values["image"] = $new_filename;		        else 		            $values["image"] = "";  		    }		    else 		        $values["image"] = "";    		}					//copy banner		if($values["banner"])		{		    		    $old_path = base_path()."uploads/competitions/banners/".$values["banner"];		    if(file_exists($old_path))		    {		        $new_filename     = time().uniqid()."-".$values["banner"];		        $new_path         = base_path()."uploads/competitions/banners/".$new_filename;		        		        @copy($old_path, $new_path);		        @chmod($new_path, 0755); 		         		        if(file_exists($new_path))		        		            $values["banner"] = $new_filename;		        else 		            $values["banner"] = "";  		    }		    else 		        $values["banner"] = "";    		}					//copy code_language_image		if($values["code_language_image"])		{		    		    $old_path = base_path()."uploads/competitions/code_language_images/".$values["code_language_image"];		    if(file_exists($old_path))		    {		        $new_filename     = time().uniqid()."-".$values["code_language_image"];		        $new_path         = base_path()."uploads/competitions/code_language_images/".$new_filename;		        		        @copy($old_path, $new_path);		        @chmod($new_path, 0755); 		         		        if(file_exists($new_path))		        		            $values["code_language_image"] = $new_filename;		        else 		            $values["code_language_image"] = "";  		    }		    else 		        $values["code_language_image"] = "";    		}				//details		$details              = $competition_details;			unset($details["id"]);		unset($details["competition_id"]);		unset($details["add_date"]);				foreach ($details["url_key"] as $lang_id=>$value) {		    $details["url_key"][$lang_id] = url_key($details["name"][$lang_id],"-");		}				//insert competition						$new_competition_id = $this->competitions_model->add_competition($values, $details);				//insert categories		if(isset($category_ids))		{				foreach($category_ids as $category_id)			{				//insert				$values = array(	"competition_id" 	=> $new_competition_id,									"category_id" 		=> $category_id								);				$this->db->insert("competitions2categories",$values);							}								}				//insert age_categories		if(isset($age_category_ids))		{				foreach($age_category_ids as $age_category_id)			{				//insert				$values = array(	"competition_id" 	 => $new_competition_id,									"age_category_id" 	 => $age_category_id								);				$this->db->insert("competitions2age_categories",$values);													}								}				//get prizes		$where 	  = " AND t1.competition_id = '".$competition_id."'		              AND lang_id = ".$this->admin_default_lang_id."  		              ";		$orderby  = "ORDER BY t1.order ASC";		$prizes_   = $this->competitions_model->get_prizes($where,$orderby,false,false,false);		foreach ($prizes_ as $prize_)		{		    $prize_id = $prize_["prize_id"];		    		    //get prize and prize_details    		//=========================================================    		$prizes  = $this->competitions_model->get_just_prizes("AND prize_id = '".$prize_id."'");    		$prize   = $prizes[0];		    		$array_prize_details  = $this->competitions_model->get_just_prizes_details("AND prize_id = '".$prize["prize_id"]."'");    		$prize_details        = [];    		foreach($array_prize_details as $array_prize_detail)				    			foreach($array_prize_detail as $field=>$value)			    				$prize_details[$field][$array_prize_detail["lang_id"]] = $value;    			    		//add prize    		//=========================================================    		//values    		$values                       = $prize;		    		$values["competition_id"]     = $new_competition_id;    		$values["add_date"]           = date("Y-m-d H:i:s");    		unset($values["prize_id"]);    		    		//copy image    		if($values["image"])    		{		        		    $old_path = base_path()."uploads/competitions/prizes/".$values["image"];    		    if(file_exists($old_path))    		    {    		        $new_filename     = time().uniqid()."-".$values["image"];    		        $new_path         = base_path()."uploads/competitions/prizes/".$new_filename;    		            		        @copy($old_path, $new_path);    		        @chmod($new_path, 0755);       		            		        if(file_exists($new_path))		            		            $values["image"] = $new_filename;    		        else     		            $values["image"] = "";      		    }    		    else     		        $values["image"] = "";        		}    		    		//details    		$details              = $prize_details;	    		unset($details["id"]);    		unset($details["prize_id"]);    		unset($details["add_date"]);		    		foreach ($details["url_key"] as $lang_id=>$value) {    		    $details["url_key"][$lang_id] = url_key($details["prize_name"][$lang_id],"-");    		}    		    		//insert prize				    		$this->competitions_model->add_prize($values, $details);				}						//done message		$_SESSION["done_message"] = $this->lang->line("done_message_edit");				//redirect		//header("Location: ".current_url());		header("Location: ".admin_url().strtolower(get_class()));		die();						}		/**	 * Delete competition	 * 	 * @param int $competition_id	 */	function delete_competition($competition_id = false, $no_redirect = false)	{				if($competition_id == false) die(); 				//delete image, banner		//=========================================================		$this->delete_file("image",  $competition_id, true);			$this->delete_file("banner", $competition_id, true);		$this->delete_file("code_language_image", $competition_id, true);							//delete prizes 		//=========================================================						$where 		= "AND t1.competition_id = '".$competition_id."' ";					$prizes 	= $this->competitions_model->get_prizes($where, false, false, false, "t1.prize_id");		foreach($prizes as $prize)			if($prize["prize_id"])									$this->delete_prize($prize["prize_id"], true);									//delete competition		//=========================================================		$this->competitions_model->delete_competition($competition_id);									//redirect		//=========================================================		if(!$no_redirect)		{						?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php			}			}		/**	 * Change field value	 * 	 * @param int $competition_id	 * @param string $field	 * @param mixed $new_value	 */	function change_competition($competition_id, $field, $new_value)	{																		if($field == "on_home" && $new_value == "1")					$this->db->update("competitions",array("on_home" => "0"));								$values = array($field => $new_value);									$this->competitions_model->edit_competition($values,false,$competition_id);						?><script type="text/javascript" language="javascript">		window.history.go(-1);													</script><?php			}		/**	 * Upload file	 * 	 * @param string $type	 * @param int $competition_id	 */	function upload_file($type, $competition_id)	{				$data = array();			if($competition_id == false) die();		//get competition		//=========================================================		$where 					= " AND t1.competition_id = '".$competition_id."'                                     AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 	= $this->competitions_model->get_competitions($where);		if(!$competitions) die();		$competition		= $competitions[0];				//upload form		//=========================================================		$this->lang->load("upload",$this->admin_default_lang);		if(isset($_POST["Upload"]))		{				//upload image			//=========================================================			if($type  == "image") 			{																									//config upload file				$config["upload_path"] 	= $this->config->item("base_path")."uploads/competitions/";				$config["allowed_types"]= "gif|jpg|png|jpeg";				$config["max_size"]		= "3072";				$config["max_width"] 	= "10000";				$config["max_height"] 	= "10000";				$config["file_name"] 	= (isset($competition["url_key"])?$competition["url_key"]:"image_".$competition_id);				$config["overwrite"] 	= FALSE;								//load upload library				$this->load->library("upload", $config);																																						//if the file has succesfully uploded				if ($this->upload->do_upload("file"))				{					//delete old file					//=========================================================					$this->delete_file($type, $competition_id, $no_redirect = true);												$file_data = $this->upload->data();																							//resize file					/* $config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 800;					$config["height"] 			= 8000;					if($file_data["image_width"] <= $config["width"])						$config["width"] 		= $file_data["image_width"]; 																//load image manupulation library					$this->load->library("image_lib");					$this->image_lib->initialize($config);										$this->image_lib->resize(); */										/*//create thumb										$config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["create_thumb"] 	= TRUE;					$config["thumb_marker"] 	= "_th";					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 150;					$config["height"] 			= 1500;																																			//load image manupulation library					$this->load->library("image_lib");										$this->image_lib->initialize($config);					$this->image_lib->resize();*/					//update					$values = array($type => $file_data["file_name"]);					$this->db->where("competition_id", $competition_id);					$this->db->update("competitions",$values);																//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();				}				else				{					//error message					$data["error_message"] = $this->upload->display_errors("","");										}																			}//end image						//upload banner			//=========================================================			if($type  == "banner") 			{																									//config upload file				$config["upload_path"] 	= $this->config->item("base_path")."uploads/competitions/banners/";				$config["allowed_types"]= "gif|jpg|png";				$config["max_size"]		= "3072";				$config["max_width"] 	= "10000";				$config["max_height"] 	= "10000";				$config["file_name"] 	= (isset($competition["url_key"])?$competition["url_key"]:"banner_".$competition_id);				$config["overwrite"] 	= FALSE;								//load upload library				$this->load->library("upload", $config);																																						//if the file has succesfully uploded				if ($this->upload->do_upload("file"))				{					//delete old file					//=========================================================					$this->delete_file($type, $competition_id, $no_redirect = true);											$file_data = $this->upload->data();																							//resize file					$config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 800;					$config["height"] 			= 8000;					if($file_data["image_width"] <= $config["width"])						$config["width"] 		= $file_data["image_width"]; 																//load image manupulation library					$this->load->library("image_lib");					$this->image_lib->initialize($config);										$this->image_lib->resize();															//update					$values = array($type => $file_data["file_name"]);					$this->db->where("competition_id", $competition_id);					$this->db->update("competitions",$values);																//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();				}				else				{					//error message					$data["error_message"] = $this->upload->display_errors("","");										}																			}//end banner						//upload code_language_image			//=========================================================			if($type  == "code_language_image") 			{																									//config upload file				$config["upload_path"] 	= $this->config->item("base_path")."uploads/competitions/code_language_images/";				$config["allowed_types"]= "gif|jpg|png";				$config["max_size"]		= "3072";				$config["max_width"] 	= "10000";				$config["max_height"] 	= "10000";				$config["file_name"] 	= (isset($competition["url_key"])?$competition["url_key"]:"code_language_image_".$competition_id);				$config["overwrite"] 	= FALSE;								//load upload library				$this->load->library("upload", $config);																																						//if the file has succesfully uploded				if ($this->upload->do_upload("file"))				{					//delete old file					//=========================================================					$this->delete_file($type, $competition_id, $no_redirect = true);											$file_data = $this->upload->data();																							//resize file					$config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 800;					$config["height"] 			= 8000;					if($file_data["image_width"] <= $config["width"])						$config["width"] 		= $file_data["image_width"]; 																//load image manupulation library					$this->load->library("image_lib");					$this->image_lib->initialize($config);										$this->image_lib->resize();															//update					$values = array($type => $file_data["file_name"]);					$this->db->where("competition_id", $competition_id);					$this->db->update("competitions",$values);																//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();				}				else				{					//error message					$data["error_message"] = $this->upload->display_errors("","");										}																			}//end code_language_image					}//end post		//page title		//=========================================================				$this->page_title = $this->lang->line("upload_file");				//send data to view		//=========================================================		$data["type"]	= $type;		$data["competition"] = $competition;					$data["body"]  	= "admin/competitions/upload_file";		$this->load->view("admin/template_iframe",$data);							}		/**	 * Delete file	 * 	 * @param string $type	 * @param int $competition_id	 * @param bool $no_redirect	 */	function delete_file($type, $competition_id, $no_redirect = false)	{		if($competition_id == false) die();				//get competition		//=========================================================		$where 					= " AND t1.competition_id = '".$competition_id."'                                     AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 	= $this->competitions_model->get_competitions($where);		if(!$competitions) die();		$competition		= $competitions[0];																					//delete image		//=========================================================		if($type == "image")		{			//delete file			$file_name	= $competition["image"];			$file_path 	= base_path()."uploads/competitions/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);							//delete thumb			$file_name	= get_thumb_name($competition["image"]);			$file_path 	= base_path()."uploads/competitions/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);				//db update			$this->db->where(array("competition_id" => $competition_id));			$this->db->update("competitions",array($type => ""));			}				//delete banner		//=========================================================		if($type == "banner")		{			//delete file			$file_name	= $competition["banner"];			$file_path 	= base_path()."uploads/competitions/banners/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);										//db update			$this->db->where(array("competition_id" => $competition_id));			$this->db->update("competitions",array($type => ""));			}				//delete code_language_image		//=========================================================		if($type == "code_language_image")		{			//delete file			$file_name	= $competition["code_language_image"];			$file_path 	= base_path()."uploads/competitions/code_language_images/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);										//db update			$this->db->where(array("competition_id" => $competition_id));			$this->db->update("competitions",array($type => ""));			}		//redirect		//=========================================================		if(!$no_redirect)		{			?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php			}	}			function prizes($competition_id = 0)	{																		$section_name 	= "competitions-prizes"; // ( numele controllerului)		//get competition		//=========================================================				$where 					= " AND t1.competition_id = '".$competition_id."'                                     AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];				$where 					= " AND lang_id = ".$this->admin_default_lang_id."									AND competition_id = '".$competition_id."' 									";																	//SORT*******************************************				 			$sort_fields 			= array('t1.prize_id', 't1.order' ,'t1.active');		$default_sort_field 	= 't1.order'; 		$default_sort_dir 		= 'asc';									$sort_label = $this->global_admin->set_sort_sesssion($sort_fields, $default_sort_field, $default_sort_dir, $section_name);								if(isset($_SESSION[$section_name]['sort_field']))					$orderby = "ORDER BY ".$_SESSION[$section_name]['sort_field']." ".$_SESSION[$section_name]['sort_order'];		else 			$orderby = "ORDER BY ".$default_sort_field." ".$default_sort_dir;			//end sort***************************************															//get prizes			$prizes = $this->competitions_model->get_prizes($where,$orderby,false,false,false);														//send data to view		$data['section_name']	= $section_name;		$data["competition"] 	= $competition;					$data['sort_label'] 	= $sort_label;				$data['prizes'] 		= $prizes;		$data['body'] 			= 'admin/competitions/list_prizes';		$this->load->view('admin/template',$data);			}	function add_prize($competition_id = 0)	{				$data = array();		$this->page_title = $this->lang->line('add_prize');				//get competition		//=========================================================				$where 					= "AND t1.competition_id = '".$competition_id."' 			                       AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];						//get languages active in admin		//=========================================================		$this->load->model("languages_model");		$languages = $this->languages_model->get_languages("AND active_admin = '1' ", " ORDER BY default_admin DESC, `order` ASC" ); 				// stabilesc daca afisez limba in dreptul campurilor		if(count($languages) > 1) 			$show_label_language = true;		else 				$show_label_language = false;				//daca se face submit la forumar			if(isset($_POST['Add']))		{						// form validation						$this->load->library('form_validation');			foreach($languages as $language)			{				// daca sunt mai multe limbi active afisez limba in dreptul campurilor in mesajele de eroare				if($show_label_language) 					$label_language = ' ('.$language['code'].')';				else					$label_language = '';				$this->form_validation->set_rules('certificate['.$language['lang_id'].']',$this->lang->line('prize_certificate').$label_language,'trim|required');					$this->form_validation->set_rules('name['.$language['lang_id'].']',$this->lang->line('prize_name').$label_language,'trim');				$this->form_validation->set_rules('description['.$language['lang_id'].']',$this->lang->line('prize_description').$label_language,'trim');				$this->form_validation->set_rules("email_content[".$language["lang_id"]."]",	$this->lang->line("prize_email_content").$label_language,		"trim|required");												}				$this->form_validation->set_rules("type",											$this->lang->line("prize_type"),						"trim|required");							$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();									// end						if($form_is_valid)			{								$where_exist = " AND t2.certificate 	= '".$this->db->escape_str($_POST['certificate'][$this->admin_default_lang_id])."'								 AND t2.lang_id 	= ".$this->admin_default_lang_id." 							   ";									$exist = $this->competitions_model->get_prizes($where_exist);												if(!$exist)				{					$values = array(	"competition_id" 	=> $competition_id,										"type"				=> $_POST["type"],										'add_date'			=> date('Y-m-d H:i:s')										);										foreach($languages as $language)										{						$url_key[$language['lang_id']] 	= url_key($_POST['name'][$language['lang_id']],'-');												$lang_ids[$language['lang_id']]	= $language['lang_id'];										}															$details = array(   'certificate'			=> $_POST['certificate'],										'prize_name'			=> $_POST['name'],									    'prize_description'		=> $_POST['description'],										"email_content" 		=> $_POST["email_content"],										'url_key' 				=> $url_key,																				'lang_id'				=> $lang_ids										);																				$this->competitions_model->add_prize($values, $details);										//header('Location: '.$this->config->item('admin_url').'prizes');					//die();										//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();				}								else $data['error_message'] = $this->lang->line('prize_exist');										}								}								//send data to view		//$data['prizes'] 					= $prizes;		$data['show_label_language'] 		= $show_label_language;		$data['languages'] 					= $languages;				$data['body'] 						= 'admin/competitions/add_prize';		$this->load->view('admin/template_iframe',$data);			}	function edit_prize($prize_id = false)	{				if($prize_id == false) die(); 				$data = array();								$this->page_title = $this->lang->line('edit_prize');				//get languages active in admin		//=========================================================		$this->load->model("languages_model");		$languages = $this->languages_model->get_languages("AND active_admin = '1' ", " ORDER BY default_admin DESC, `order` ASC" ); 						//get prize and prize_details		//=========================================================				$prizes = $this->competitions_model->get_just_prizes("AND prize_id = '".$prize_id."'");		if(!$prizes) die();				$prize = $prizes[0];		$array_prize_details  = $this->competitions_model->get_just_prizes_details("AND prize_id = '".$prize_id."'");		foreach($array_prize_details as $array_prize_detail)							foreach($array_prize_detail as $field=>$value)							$prize_details[$field][$array_prize_detail["lang_id"]] = $value;						// stabilesc daca afisez limba in dreptul campurilor		if(count($languages) > 1) 			$show_label_language = true;		else 				$show_label_language = false;				// daca se face submit la formular		if(isset($_POST['Edit']))		{						//begin form validation						$this->load->library('form_validation');			foreach($languages as $language)			{				// daca sunt mai multe limbi active afisez limba in dreptul campurilor in mesajele de eroare				if($show_label_language) 					$label_language = ' ('.$language['code'].')';				else					$label_language = '';										$this->form_validation->set_rules('certificate['.$language['lang_id'].']',$this->lang->line('prize_certificate').$label_language,'trim|required');					$this->form_validation->set_rules('name['.$language['lang_id'].']',$this->lang->line('prize_name').$label_language,'trim');				$this->form_validation->set_rules('description['.$language['lang_id'].']',$this->lang->line('prize_description').$label_language,'trim');				$this->form_validation->set_rules("email_content[".$language["lang_id"]."]",	$this->lang->line("prize_email_content").$label_language,		"trim|required");								}			$this->form_validation->set_rules("type",											$this->lang->line("prize_type"),						"trim|required");									$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();							//end form validation						if($form_is_valid)			{																$where_exist = " AND t2.certificate = '".$this->db->escape_str($_POST['certificate'][$this->admin_default_lang_id])."'								 AND t2.lang_id = ".$this->admin_default_lang_id."								 AND t2.prize_id != ".$prize_id." 								 AND t1.competition_id = ".$prize['competition_id']." 		    							   ";														$exist = $this->competitions_model->get_prizes($where_exist);								if(!$exist)				{					$values = array(	"type"					=> $_POST["type"],																			);										foreach($languages as $language)										{						$url_key[$language['lang_id']] 	= url_key($_POST['name'][$language['lang_id']],'-');												$lang_ids[$language['lang_id']]	= $language['lang_id'];										}															$details = array(   'certificate'			=> $_POST['certificate'],										'prize_name'			=> $_POST['name'],									    'prize_description'		=> $_POST['description'],										"email_content" 		=> $_POST["email_content"],																				'url_key' 				=> $url_key,										'lang_id'				=> $lang_ids																			);																				$this->competitions_model->edit_prize($values, $details, $prize_id);										//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();										//header('Location: '.$this->config->item('admin_url').'prizes');					//die();				}								else $data['error_message'] = $this->lang->line('prize_exist');										}								}						//send data to view		$data['prize'] = $prize;		$data['prize_details'] = $prize_details;				$data['show_label_language'] = $show_label_language;		$data['languages'] = $languages;				$data['body'] = 'admin/competitions/edit_prize';		$this->load->view('admin/template_iframe',$data);			}	function delete_prize($prize_id = false, $no_redirect = false)	{				//delete image, banner		//=========================================================		$this->delete_prize_file("image",  $prize_id, true);					if($prize_id) 			$this->competitions_model->delete_prize($prize_id);						//redirect		//=========================================================		if(!$no_redirect)		{			?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php			}	}		function change_prize($prize_id, $field, $new_value)	{		$values = array($field => $new_value);				$this->competitions_model->edit_prize($values, false, $prize_id);				?><script type="text/javascript" language="javascript">		window.history.go(-1);													</script><?php			}				/**	 * Upload file	 * 	 * @param string $type	 * @param int $prize_id	 */	function upload_prize_file($type, $prize_id)	{				$data = array();			if($prize_id == false) die();		//get prize		//=========================================================		$prizes 	= $this->competitions_model->get_prizes(" AND t1.prize_id = '".$prize_id."' AND lang_id = '".$this->admin_default_lang_id."' ");		if(!$prizes) die();		$prize		= $prizes[0];				//upload form		//=========================================================		$this->lang->load("upload",$this->admin_default_lang);		if(isset($_POST["Upload"]))		{				//upload image			//=========================================================			if($type  == "image") 			{																									//config upload file				$config["upload_path"] 	= $this->config->item("base_path")."uploads/competitions/prizes/";				$config["allowed_types"]= "gif|jpg|png|jpeg";				$config["max_size"]		= "3072";				$config["max_width"] 	= "10000";				$config["max_height"] 	= "10000";				$config["file_name"] 	= (isset($prize["url_key"])?$prize["url_key"]:"image_".$prize_id);				$config["overwrite"] 	= FALSE;								//load upload library				$this->load->library("upload", $config);																																						//if the file has succesfully uploded				if ($this->upload->do_upload("file"))				{					//delete old file					//=========================================================					$this->delete_prize_file($type, $prize_id, $no_redirect = true);												$file_data = $this->upload->data();											//resize file					$config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 800;					$config["height"] 			= 8000;					if($file_data["image_width"] <= $config["width"])						$config["width"] 		= $file_data["image_width"]; 																//load image manupulation library					$this->load->library("image_lib");					$this->image_lib->initialize($config);										$this->image_lib->resize();										/*//create thumb										$config["image_library"] 	= "gd2";					$config["source_image"] 	= $config["upload_path"].$file_data["file_name"];					$config["create_thumb"] 	= TRUE;					$config["thumb_marker"] 	= "_th";					$config["maintain_ratio"] 	= TRUE;					$config["width"] 			= 150;					$config["height"] 			= 1500;																																			//load image manupulation library					$this->load->library("image_lib");										$this->image_lib->initialize($config);					$this->image_lib->resize();*/										//update					$values = array($type => $file_data["file_name"]);										$this->db->where("prize_id", $prize_id);					$this->db->update("competitions_prizes",$values);																//redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php					die();				}				else				{					//error message					$data["error_message"] = $this->upload->display_errors("","");										}																			}//end image											}//end post		//page title		//=========================================================				$this->page_title = $this->lang->line("upload_file");				//send data to view		//=========================================================		$data["type"]	= $type;		$data["prize"] = $prize;					$data["body"]  	= "admin/competitions/upload_file";		$this->load->view("admin/template_iframe",$data);							}		/**	 * Delete file	 * 	 * @param string $type	 * @param int $prize_id	 * @param bool $no_redirect	 */	function delete_prize_file($type, $prize_id, $no_redirect = false)	{		if($prize_id == false) die();				//get prize		//=========================================================		$prizes 	= $this->competitions_model->get_prizes(" AND t1.prize_id = '".$prize_id."' AND lang_id = '".$this->admin_default_lang_id."' ");		if(!$prizes) 			return false;		$prize		= $prizes[0];																					//delete image		//=========================================================		if($type == "image")		{			//delete file			$file_name	= $prize["image"];			$file_path 	= base_path()."uploads/competitions/prizes/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);							//delete thumb			$file_name	= get_thumb_name($prize["image"]);			$file_path 	= base_path()."uploads/competitions/prizes/".$file_name;				if($file_name && file_exists($file_path))					unlink($file_path);				//db update			$this->db->where(array("prize_id" => $prize_id));			$this->db->update("competitions_prizes",array($type => ""));			}						//redirect		//=========================================================		if(!$no_redirect)		{			?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><!--<?php			}	}		function participants($competition_id = 0, $export = false)	{																	    $section_name 	= "competitions-participants-".$competition_id; // ( numele controllerului)		$this->lang->load("users",$this->admin_default_lang);		//save notes		//=========================================================		if(isset($_POST["Save"]))		{			//form validation			//=========================================================					$this->load->library('form_validation');									foreach($_POST["participant_ids"] as $participant_id)			{				$this->form_validation->set_rules("note[".$participant_id."]",		$this->lang->line("participant_note"),		"trim|numeric|greater_than[0]|less_than_equal_to[10]");										$this->form_validation->set_rules("prize_id[".$participant_id."]",	$this->lang->line("prize_name"),			"trim");			}			$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();								//if form valid			//=========================================================			if($form_is_valid)			{				foreach($_POST["participant_ids"] as $participant_id)				{					$values = array(	"note" 			=> $_POST["note"][$participant_id],										"prize_id" 		=> $_POST["prize_id"][$participant_id],																			);														//remove diploma					$file_name = $_POST["participant_diplomas"][$participant_id];		            $file_path = base_path()."uploads/competitions/diploma/".$file_name;		            if($file_name && file_exists($file_path))		            {		               	chmod($file_path, 0755);		    			unlink($file_path);		    					    			$values["diploma"] = "";		            }	            																					            										$this->competitions_model->edit_participant($values, $participant_id);										}								//update competition				$values = array(	"save_notes_date" => date("Y-m-d H:i:s"));				$this->competitions_model->edit_competition($values, false, $competition_id);								//done message				$_SESSION['done_message'] = "Datele au fost salvate cu succes.";								//redirect				header("Location: ".current_url());				die();			}						}				//generate diplomas		//=========================================================		if(isset($_POST["GenereazaDiplomele"]))		{			//get participants		    		//=========================================================	    		    		$where 			= "  AND competition_id = '".$competition_id."' 							     AND (project_filename != '' OR project_link_extern != '')							     ";	    		$orderby 		= " ORDER BY cat.order ASC, age_cat.order ASC,								p.note DESC,								p.competitions_participant_id ASC								";				    		$fields         = "competitions_participant_id";    		$participants 	= $this->competitions_model->get_participants($where,$orderby,false,false,$fields);    				    foreach($participants as $participant)			{				//generate file				$this->generate_diplama($participant["competitions_participant_id"]); 								}						//update competition			$values = array("generate_diplomas_date" => date("Y-m-d H:i:s"));			$this->competitions_model->edit_competition($values, false, $competition_id);						//done message			$_SESSION['done_message'] = "Diplomele si certificatele au fost generate cu succes.";									//redirect			header("Location: ".current_url());			die();						}				//download zip		//=========================================================		if(isset($_POST["DownloadZip"]))		{						//create zip archive			//====================================================					$this->load->library('zip');			foreach($_POST["participant_ids"] as $participant_id)			{				$file_name = $_POST["participant_diplomas"][$participant_id];	            $file_path = base_path()."uploads/competitions/diploma/".$file_name;	            if($file_name && file_exists($file_path))	            {	               	@chmod($file_path, FILE_WRITE_MODE);				            	$this->zip->read_file($file_path);									}			}								$zip_name = "competition-".$competition_id."-".strtotime(date("Y-m-d H:i:s")).".zip";			$zip_path = base_path().'uploads/export/'.$zip_name;								$this->zip->archive($zip_path);						//delete zip file			//====================================================			if(file_exists($zip_path))						unlink($zip_path);							//download zip file			//====================================================				$this->zip->download("competition-".$competition_id.'.zip'); 						die();		}			//remove all participants		//=========================================================		if(isset($_POST["DeleteAllParticipants"]))		{			foreach($_POST["participant_ids"] as $participant_id)			{				//generate file				$this->delete_participant($participant_id, true); 								}						//update competition			$values = array(	"save_notes_date" 			=> "0000-00-00 00:00:00",								"generate_diplomas_date" 	=> "0000-00-00 00:00:00",							);			$this->competitions_model->edit_competition($values, false, $competition_id);						//done message			$_SESSION['done_message'] = "Toti participantii au fost eliminati cu succes.";									//redirect			header("Location: ".current_url());			die();						}				//get competition		//=========================================================				$where 					= " AND t1.competition_id = '".$competition_id."' 			                        AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];				//get prizes		//=========================================================				$where 			= " AND lang_id = ".$this->admin_default_lang_id."							AND competition_id = '".$competition_id."'  ";		$orderby 		= "ORDER BY `order` ASC";		$prizes = $this->competitions_model->get_prizes($where,$orderby,false,false,false);				//where 		$where 			= " AND competition_id = '".$competition_id."' ";				//SEARCH		//======================================================		//create countries select		$this->load->library('locations');		$countries 	=  $this->locations->get_countries();		$countries_select = array();		foreach($countries as $country)		    $countries_select[$country['country_id']] = $country['country_name'];				//create age_categories select		$this->load->model('age_categories_model');			$where_ 					= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby_ 					= "ORDER BY `order` asc";						$age_categories 			= $this->age_categories_model->get_age_categories($where_,$orderby_,false,false,false);		$age_categories_select = array();		foreach($age_categories as $age_category)		    $age_categories_select[$age_category['age_category_id']] = $age_category['age_category_name'];				//create categories select		$this->load->model('categories_model');			$where_ 					= " AND lang_id = ".$this->admin_default_lang_id." ";		$orderby_ 					= "ORDER BY `order` asc";						$categories 			= $this->categories_model->get_categories($where_,$orderby_,false,false,false);		$categories_select = array();		foreach($categories as $category)		    $categories_select[$category['category_id']] = $category['category_name'];		        $search_by = array		    (	array	(			        "field_name"	=> "user_id",		        "field_label" 	=> "ID",		        "field_type"	=> "input",		        "field_values"	=> array()		    ),	        array	(		            "field_name"	=> "name",	            "field_label" 	=> $this->lang->line("user_name"),	            "field_type"	=> "input",	            "field_values"	=> array()	        ),	        array	(		            "field_name"	=> "email",	            "field_label" 	=> $this->lang->line("user_email"),	            "field_type"	=> "input",	            "field_values"	=> array()	        ),	        array	(		            "field_name"	=> "country_id",	            "field_label" 	=> $this->lang->line("user_country"),	            "field_type"	=> "select",	            "field_values"	=> $countries_select	        ),		   array	(		            "field_name"	=> "status",	            "field_label" 	=> $this->lang->line("status"),	            "field_type"	=> "checkbox",	            "field_values"	=> array("1" => $this->lang->line("active"), "0" => $this->lang->line("inactive"))	        ),		    array	(		            "field_name"	=> "age_category_id",	            "field_label" 	=> $this->lang->line("competition_age_category"),	            "field_type"	=> "select",	            "field_values"	=> $age_categories_select	        ), 		    array	(		            "field_name"	=> "category_id",	            "field_label" 	=> $this->lang->line("competition_category"),	            "field_type"	=> "select",	            "field_values"	=> $categories_select	        ),		    array	(		            "field_name"	=> "project_verified",	            "field_label" 	=> $this->lang->line("participant_project_verified"),	            "field_type"	=> "checkbox",	            "field_values"	=> array("1" => $this->lang->line("yes"), "0" => $this->lang->line("no"))	        ),		    array	(		            "field_name"	=> "school",	            "field_label" 	=> $this->lang->line("user_school"),	            "field_type"	=> "input",	            "field_values"	=> array()	        ),		    array	(		            "field_name"	=> "city",	            "field_label" 	=> $this->lang->line("user_city"),	            "field_type"	=> "input",	            "field_values"	=> array()	        )     		        	    );		    	    //set search session	    if(isset($_POST["Search"]))	    {	        $_SESSION[$section_name]["search_by"] = $_POST;	        header("Location: ".admin_url()."competitions/participants/".$competition_id);	        die();	    }	    	    //reset search session	    if(isset($_POST["Reset"]) && isset($_SESSION[$section_name]["search_by"]))	    {	        unset($_SESSION[$section_name]["search_by"]);	        header("Location: ".admin_url()."competitions/participants/".$competition_id);	        die();	    }		    	    //create search query	    if(isset($_SESSION[$section_name]["search_by"]))	    {	        $search = $_SESSION[$section_name]["search_by"];	        	        if(isset($search["user_id"]) && !empty($search["user_id"]))	            $where .= " AND u.user_id = '".$search["user_id"]."' ";	                        if(isset($search["country_id"]) && !empty($search["country_id"]))                $where .= " AND u.country_id = '".$search["country_id"]."' ";	                            if(isset($search["status"]) && !empty($search["status"]))            {                $where .= " AND ( ";                foreach($search["status"] as $k => $value)                {                    if(isset($search["status"][$k]))                    {                        if($k > 0)                            $where .= " OR ";                        $where 	.= " u.active = '".$search["status"][$k]."' ";                    }                }                $where .= " ) ";            }	                            if(isset($search["name"]) && !empty($search["name"]))                $where .= " AND u.name LIKE '%".$this->db->escape_like_str($search["name"])."%' ";                            if(isset($search["email"]) && !empty($search["email"]))                $where .= " AND u.email LIKE '%".$this->db->escape_str($search["email"])."%' ";	                     if(isset($search["age_category_id"]) && !empty($search["age_category_id"]))                $where .= " AND p.age_category_id = '".$search["age_category_id"]."' ";                          if(isset($search["category_id"]) && !empty($search["category_id"]))                $where .= " AND p.category_id = '".$search["category_id"]."' ";                         if(isset($search["project_verified"]) && !empty($search["project_verified"]))            {                $where .= "AND (project_filename != '' OR project_link_extern != '' ) AND ( ";                foreach($search["project_verified"] as $k => $value)                {                    if(isset($search["project_verified"][$k]))                    {                        if($k > 0)                            $where .= " OR ";                        $where 	.= " p.project_verified = '".$search["project_verified"][$k]."' ";                    }                }                $where .= " ) ";            }                        if(isset($search["school"]) && !empty($search["school"]))                $where .= " AND u.school LIKE '%".$this->db->escape_str($search["school"])."%' ";                        if(isset($search["city"]) && !empty($search["city"]))                $where .= " AND u.city LIKE '%".$this->db->escape_str($search["city"])."%' ";    	    }				//get participants				//=========================================================																				$orderby 		= "ORDER BY cat.order ASC, 									age_cat.order ASC,									p.note DESC,									p.competitions_participant_id ASC									";						$participants 	= $this->competitions_model->get_participants($where,$orderby,false,false,false);		foreach($participants as $key=>$participant)		{		    foreach($prizes as $prize)		    {		        if($participant["prize_id"] == $prize["prize_id"])		        {		            $participants[$key]["prize"] = $prize;		            break;		        }		    }		}																	//export participants				//=========================================================			if($export)		{			//create csv file 			//=========================================================			$filename 	= url_title($competition["name"],"-").'-'.date("Y.m.d.H.i.s").'.csv';			$filepath 	= $this->config->item("base_path").'uploads/export/'.$filename;			$fileurl  	= $this->config->item("base_url").'uploads/export/'.$filename;							$fp 		= fopen($filepath, 'w');								$line 		= array(	"User ID",									$this->lang->line("user_name"),									$this->lang->line("user_email"),			                        $this->lang->line("user_phone"),									$this->lang->line("user_birthday"),											$this->lang->line("user_city"),									$this->lang->line("user_country"),																		$this->lang->line("user_school"),									$this->lang->line("user_guide"),									$this->lang->line("competition_category"),									$this->lang->line("competition_age_category"),									$this->lang->line("participant_registration_date"),									$this->lang->line("participant_project_link_extern"),									$this->lang->line("participant_project_file"),																	"Data trimitere proiect"																		);														fputcsv($fp, $line, ',','"');						foreach($participants as $participant)			{				if( !($participant["project_link_extern"] || $participant["project_filename"]) )					continue;									$line = array(	$participant["user_id"],								$participant["name"],								$participant["email"],				                $participant["phone"],								$participant["birthday"],										$participant["city"],								$participant["country_name"],								$participant["school"],								$participant["guide"],								$participant["category_name"],								$participant["age_category_name"],								$participant["registration_date"],								$participant["project_link_extern"],								($participant["project_filename"]?base_url()."project/".$participant['project_number']:""),								$participant["project_add_date"],																							);															fputcsv($fp, $line);						}			fclose($fp);					$file_content = file_get_contents($fileurl);							if(file_exists($filepath))  				unlink($filepath);								//force download			//=========================================================			header("Cache-Control: must-revalidate, post-check=0, pre-check=0");			header("Content-Length: " . strlen($file_content));			header("Content-type: text/x-csv");			header("Content-Disposition: attachment; filename=".$filename.".csv");			echo $file_content;									}				//get participants_number who registered		//=========================================================		$where 			= " AND competition_id = '".$competition['competition_id']."'  ";		$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(*) as nr");		$competition["participants_number_all"] = 0;		if(isset($participants1[0]["nr"]))		    $competition["participants_number_all"] = $participants1[0]["nr"];		    		//get countries_number who registered	    //=========================================================	    $where 			= " AND competition_id = '".$competition['competition_id']."'  ";	    $participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct u.country_id) as nr");	    $competition["countries_number_all"] = 0;	    if(isset($participants1[0]["nr"]))	        $competition["countries_number_all"] = $participants1[0]["nr"];		        	    //get schools_number who registered        //=========================================================        $where 			= " AND competition_id = '".$competition['competition_id']."'  ";        $participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct CONCAT(u.school, u.guide, u.city)) as nr");        $competition["schools_number_all"] = 0;        if(isset($participants1[0]["nr"]))            $competition["schools_number_all"] = $participants1[0]["nr"];				//get participants_number who sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename != '' OR project_link_extern != '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(*) as nr");		$competition["participants_number"] = 0;		if(isset($participants1[0]["nr"]))			$competition["participants_number"] = $participants1[0]["nr"];					//get countries_number who sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename != '' OR project_link_extern != '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct u.country_id) as nr");		$competition["countries_number"] = 0;		if(isset($participants1[0]["nr"]))			$competition["countries_number"] = $participants1[0]["nr"];		//get schools_number who sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename != '' OR project_link_extern != '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct CONCAT(u.school, u.guide, u.city)) as nr");		$competition["schools_number"] = 0;		if(isset($participants1[0]["nr"]))			$competition["schools_number"] = $participants1[0]["nr"];						//get participants_number who does not sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename = '' AND project_link_extern = '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(*) as nr");		$competition["participants_number_registered"] = 0;		if(isset($participants1[0]["nr"]))			$competition["participants_number_registered"] = $participants1[0]["nr"];					//get countries_number who does not sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename = '' AND project_link_extern = '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct u.country_id) as nr");		$competition["countries_number_registered"] = 0;		if(isset($participants1[0]["nr"]))			$competition["countries_number_registered"] = $participants1[0]["nr"];		//get schools_number who does not sent project		//=========================================================							$where 			= " AND competition_id = '".$competition['competition_id']."' AND (project_filename = '' AND project_link_extern = '') ";																						$participants1 	= $this->competitions_model->get_participants($where,false,false,false,"count(distinct CONCAT(u.school, u.guide, u.city)) as nr");		$competition["schools_number_registered"] = 0;		if(isset($participants1[0]["nr"]))			$competition["schools_number_registered"] = $participants1[0]["nr"];						//send data to view		//=========================================================				$data['section_name']	= $section_name;		$data['search_by']		= $search_by;		$data["competition"] 	= $competition;		$data["prizes"] 		= $prizes;					$data['participants'] 	= $participants;		$data['body'] 			= 'admin/competitions/list_participants';		$this->load->view('admin/template',$data);			}		function participants_raport($competition_id = false)	{																	    if($competition_id == false) die(); 				$data = array();								$this->page_title = $this->lang->line('participant_raport');			    $this->lang->load("users",$this->admin_default_lang);						//get competition		//=========================================================				$where 					= "AND t1.competition_id = '".$competition_id."' 				                   AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];						//get participants				//=========================================================				$fields       = " catd.category_name,		                  age_catd.age_category_name,		                  		                  COUNT(*) as nr_users, 		                  COUNT(distinct u.country_id) as nr_countries,		                  COUNT(distinct CONCAT(u.school, u.guide, u.city)) as nr_schools		              ";		$where 		  = " AND competition_id = '".$competition['competition_id']."'  ";		$orderby      = " ORDER BY cat.order ASC, age_cat.order ASC ";			$groupby      = " GROUP BY p.category_id, p.age_category_id";				$participants = $this->competitions_model->get_participants($where,$orderby,false,false,$fields,$groupby);					//get participants with project				//=========================================================				$where 		  = " AND competition_id = '".$competition['competition_id']."' 		                  AND (project_filename != '' OR project_link_extern != '') ";						$participants_with_project  = $this->competitions_model->get_participants($where,$orderby,false,false,$fields,$groupby);				//get participants without project				//=========================================================				$where 		  = " AND competition_id = '".$competition['competition_id']."' 		                  AND (project_filename = '' AND project_link_extern = '') ";						$participants_without_project  = $this->competitions_model->get_participants($where,$orderby,false,false,$fields,$groupby);				//send data to view		//=========================================================				$data["competition"] 	                   = $competition;		$data['participants'] 	                   = $participants;		$data['participants_with_project'] 	       = $participants_with_project;		$data['participants_without_project'] 	   = $participants_without_project;		$data['body'] 			= 'admin/competitions/participants_raport';		$this->load->view('admin/template_iframe',$data);			}		function edit_participant($participant_id = false)	{				if($participant_id == false) die(); 				$data = array();								$this->page_title = $this->lang->line('edit_participant');				//get participant and participant_details		//=========================================================				$participants = $this->competitions_model->get_participants("AND competitions_participant_id = '".$participant_id."'");		if(!$participants) die();				$participant = $participants[0];				//daca se face submit la formular		if(isset($_POST['Edit']))		{						//begin form validation						$this->load->library('form_validation');						$this->form_validation->set_rules("project_link_extern",	$this->lang->line("participant_project_link_extern"),	"trim|required");									$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();							//end form validation						if($form_is_valid)			{																				$values = array(					    "project_link_extern"	=> $_POST["project_link_extern"],														);																											$this->competitions_model->edit_participant($values, $participant_id);								//redirect				?><script type="text/javascript" language="javascript">													parent.jQuery.fancybox.close();				window.parent.location.reload();															</script><?php				die();								//header('Location: '.$this->config->item('admin_url').'participants');				//die();													}								}						//send data to view		$data['participant']          = $participant;		$data['body']                 = 'admin/competitions/edit_participant';		$this->load->view('admin/template_iframe',$data);			}		function edit_participant_comment($participant_id = false)	{				if($participant_id == false) die(); 				$data = array();								$this->page_title = $this->lang->line('edit_participant');				//get participant and participant_details		//=========================================================				$participants = $this->competitions_model->get_participants("AND competitions_participant_id = '".$participant_id."'");		if(!$participants) die();				$participant = $participants[0];				//daca se face submit la formular		if(isset($_POST['Edit']))		{						//begin form validation						$this->load->library('form_validation');						$this->form_validation->set_rules("comment",	$this->lang->line("participant_comment"),	"trim");									$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();							//end form validation						if($form_is_valid)			{																				$values = array(					    "comment"	=> $_POST["comment"],														);																											$this->competitions_model->edit_participant($values, $participant_id);								//redirect				?><script type="text/javascript" language="javascript">													parent.jQuery.fancybox.close();				window.parent.location.reload();															</script><?php				die();								//header('Location: '.$this->config->item('admin_url').'participants');				//die();													}								}						//send data to view		$data['participant']          = $participant;		$data['body']                 = 'admin/competitions/edit_participant_comment';		$this->load->view('admin/template_iframe',$data);			}		/**	 * Change field value	 * 	 * @param int $competitions_participant_id	 * @param string $field	 * @param mixed $new_value	 */	function change_participant($competitions_participant_id, $field, $new_value)	{																				$values = array($field => $new_value);									$this->competitions_model->edit_participant($values,$competitions_participant_id);						?><script type="text/javascript" language="javascript">		window.history.go(-1);													</script><?php			}		/**	 * Delete participant	 * 	 * @param int $competitions_participant_id	 */	function delete_participant($competitions_participant_id = false, $no_redirect = false)	{				if($competitions_participant_id == false) die();				//get participant			//=========================================================			$where 			= " AND p.competitions_participant_id = '".$competitions_participant_id."' ";																						$participants 	= $this->competitions_model->get_participants($where);		if(!$participants)			die();		$participant = $participants[0];					//delete project_file		//=========================================================		$file_name	= $participant["project_filename"];		$file_path 	= base_path()."uploads/competitions/projects/".$file_name;			if($file_name && file_exists($file_path))				unlink($file_path);				//delete diploma		//=========================================================		$file_name	= $participant["diploma"];		$file_path 	= base_path()."uploads/competitions/diploma/".$file_name;			if($file_name && file_exists($file_path))				unlink($file_path);									//delete participant		//=========================================================		$this->competitions_model->delete_participant($competitions_participant_id);								//redirect		//=========================================================		if(!$no_redirect)		{						?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php			}			}		/**	 * Change field value	 * 	 * @param int $competitions_participant_id	 * @param string $field	 * @param mixed $new_value	 */	function ajax_set_project_verified($competitions_participant_id)	{																				//$values = array("project_verified" => "1");									//$this->competitions_model->edit_participant($values,$competitions_participant_id);						echo "ok";	}		public function close_competition($competition_id, $testing = false)	{		//get competition		//=========================================================				$where 					= "   AND t1.competition_id = '".$competition_id."'                                      AND t2.lang_id = ".$this->admin_default_lang_id."                                     ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];				//get prizes		//=========================================================				$where 			= " AND lang_id = ".$this->admin_default_lang_id."							AND competition_id = '".$competition_id."'  ";		$orderby 		= "ORDER BY `order` ASC";		$prizes = $this->competitions_model->get_prizes($where,$orderby,false,false,false);				//get participants				//=========================================================			$where 			= " AND competition_id = '".$competition_id."' 							AND (project_filename != '' OR project_link_extern != '')							";				if($this->setting->item["send_only_diploma_when_close"] == "yes")		    $where .= "AND prize_id > 0";		$orderby 		= "ORDER BY cat.order ASC, 									age_cat.order ASC,									p.note DESC,									p.competitions_participant_id ASC									";						$participants 	= $this->competitions_model->get_participants($where,$orderby,false,false,false);								//check if admin fall in notes		//=========================================================			$no_note = 0;		foreach($participants as $participant)		{			if($participant["note"] == 0.00)			{				$no_note++;				break;			}				}		if($no_note)		{			$_SESSION['error_message'] = "Competitia nu poate fi inchisa. Nu ati completat notele tuturor candidatilor.";						?>--><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php						die();		}				/*		//check if admin set all the prizes		//=========================================================		$prize_error = 0;			foreach($prizes as $prize)		{			$found = false; 			foreach($participants as $participant)			{				if($prize["prize_id"] == $participant["prize_id"])				{					$found = true;					break;				}				}			if(!$found)				$prize_error++;			}		if($prize_error)		{			$_SESSION['error_message'] = "Competitia nu poate fi inchisa. Nu ati setat toate premiile definite la aceasta competitie candidatilor.";						?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php						die();		}		*/				//check if diplomas are all generated		//=========================================================		$no_diploma = 0;		foreach($participants as $participant)		{			if(!$participant["diploma"])				$no_diploma++;		}		if($no_diploma)		{			$_SESSION['error_message'] = "Competitia nu poate fi inchisa. Nu ati generat toate diplomele.";						?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php						die();		}				//check if diplomas are updated after last saved noted and prizes		//=========================================================				if(strtotime($competition["save_notes_date"]) >= strtotime($competition["generate_diplomas_date"]))		{			$_SESSION['error_message'] = "Competitia nu poate fi inchisa. Trebuie sa actualizati/generati din nou diplomele.";						?><script type="text/javascript" language="javascript">			window.history.go(-1);														</script><?php						die();		}				//update status		//=========================================================		if($testing)		{		    //done message    		//=========================================================	    		$_SESSION['done_message'] = "S-au trimis mailurile de informare pe adresa ".$this->setting->item["testing_email"]." Daca le-ati primit, puteti inchide competitia. Verificati prin sondaj si continutul lor.";		}		else		{    		$values = array("status" => "close");							    		$this->competitions_model->edit_competition($values,false,$competition_id);    		    		//done message    		//=========================================================	    		$_SESSION['done_message'] = "Competitie inchisa cu succes.";		}									//send email with certificate for participation or diplama		//=========================================================			foreach($participants as $participant)		{			//get competition    		//=========================================================		    		$where 					= " AND t1.competition_id = '".$competition_id."'                                        AND t2.lang_id = ".$participant["lang_id"]."                                         ";    		$competitions 			= $this->competitions_model->get_competitions($where);    		$competition 			= $competitions[0];    					//get prizes			//=========================================================					$where 			= " AND lang_id = ".$participant["lang_id"]."								AND t1.prize_id = '".$participant["prize_id"]."' ";			$orderby 		= "ORDER BY `order` ASC";			$prizes 		= $this->competitions_model->get_prizes($where,$orderby,false,false,false);			if($prizes)				$participant["prize"] = $prizes[0];							//diploma			//=============================================================				$file_name 	= $participant["diploma"];			$file_url 	= file_url()."uploads/competitions/diploma/".$file_name;	        $file_path 	= base_path()."uploads/competitions/diploma/".$file_name;	        if(!($file_name && file_exists($file_path)))	       		continue;	       	$attachment_file_name = str_replace("-".$participant["project_number"],"",$file_name);						        //send email			//=============================================================							$email_subject 	= $competition["name"];			$email_content 	= $competition['email_content'];			if(isset($participant["prize"]))						$email_content = $participant["prize"]["email_content"];													//apply template to email content			$this->load->library('parser');							  			$email_content = $this->parser->parse('front/email_forms/template', array("body"=>$email_content), TRUE);						if($testing)			    $participant['email'] = $this->setting->item["testing_email"];							//load email library										$this->load->library('email');				$this->email->initialize();			$this->email->clear(true);								$this->email->to($participant['email']);											$this->email->from($this->setting->item['email_from'], $this->setting->item['site_name']);												$this->email->reply_to($this->setting->item['email'], $this->setting->item['site_name']);																$this->email->subject($email_subject);			$this->email->message($email_content);			$this->email->set_alt_message(nl2br(strip_tags($email_content)));					$this->email->attach($file_path, 'attachment', $attachment_file_name);							@$this->email->send();						sleep(9);		}															?><script type="text/javascript" language="javascript">		window.history.go(-1);													</script><?php	}		private function generate_diplama($participant_id)	{						//get participants				//=========================================================			$where 			= " AND competitions_participant_id = '".$participant_id."' ";																						$participants 	= $this->competitions_model->get_participants($where);			if(!$participants) 			return false;		$participant = $participants[0];								//print_r($participant); die();				/* if($participant["note"] <= 0 && ( $participant["prize_id"] > 0 || $participant["diploma"] != ""  ))		{		    if($participant["diploma"])		    {    		    //delete diploma        		//=========================================================        		$file_name	= $participant["diploma"];        		$file_path 	= base_path()."uploads/competitions/diploma/".$file_name;	        		if($file_name && file_exists($file_path))	        			unlink($file_path);		    }		    		    //update diploma field    		$values = array(  "prize_id" => 0,    		                  "diploma" => "",    		                  );    		$this->competitions_model->edit_participant($values, $participant_id);				    return false;		} */				//get factura content from link with curl		$diplama_link 	= admin_url()."competitions/view_diplama/".$participant_id;		                $ch = curl_init();		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		curl_setopt($ch, CURLOPT_URL, $diplama_link);		$page_content = curl_exec($ch);		curl_close($ch);																						$html = $page_content;		$html = str_replace(file_url(),base_path(),$html);		//parametri pentru pdf				$file_name = ($participant["prize_id"]?"diploma":"certificate")."-".url_title($participant["name"])."-".$participant["project_number"].'.pdf';		$file_path = base_path().'uploads/competitions/diploma/'.$file_name;						//genereaza pdf				require($this->config->item('base_path')."myclasses/dompdf-0.8.3/autoload.inc.php");		$dompdf = new Dompdf\Dompdf();		        $dompdf->load_html($html);        $dompdf->set_paper('a4', 'landscape');        $dompdf->set_option( 'dpi' , '300' );		$dompdf->render();						        $pdf = $dompdf->output();  				        file_put_contents($file_path, $pdf);			@chmod($file_path, 0777);		//update diploma field		$values = array("diploma" => $file_name);		$this->competitions_model->edit_participant($values, $participant_id);	}					function send_email($participant_id = 0, $email_template_id = false)	{				$data = array();		$this->page_title = $this->lang->line('participant_send_email');				//get participants				//=========================================================			$where 			= " AND p.competitions_participant_id = '".$participant_id."' ";																						$participants 	= $this->competitions_model->get_participants($where);		if(!$participants)			die();		$participant = $participants[0];								//get prizes		//=========================================================				$where 			= " AND lang_id = ".$participant["lang_id"]."							AND t1.prize_id = '".$participant["prize_id"]."' ";		$orderby 		= "ORDER BY `order` ASC";		$prizes 		= $this->competitions_model->get_prizes($where,$orderby,false,false,false);		if($prizes)			$participant["prize"] = $prizes[0];								//get competition		//=========================================================				$where 					= " AND t1.competition_id = '".$participant["competition_id"]."' 									AND t2.lang_id = ".$participant["lang_id"]."									";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) 			return false;		$competition 			= $competitions[0];					//get email_templates		//=========================================================		$this->load->model('email_templates_model');		$where			 	= " AND t1.identifier IN ('email_to_user_1', 'email_to_user_2', 'email_to_user_3', 'email_to_user_4') 								AND t2.lang_id = ".$this->admin_default_lang_id." ";			$email_templates 	= $this->email_templates_model->get_email_templates($where,false,false,false,false);								//daca se face submit la forumar			if(isset($_POST['Send']))		{						//form validation			$this->load->library('form_validation');							$this->form_validation->set_rules('subject',		$this->lang->line('participant_email_subject'),	'trim|required');							$this->form_validation->set_rules('to_email',		$this->lang->line('participant_email_to_email'),'trim|required|valid_email');														$this->form_validation->set_rules('to_name',		$this->lang->line('participant_email_to_name'),	'trim|required');			$this->form_validation->set_rules('content',		$this->lang->line('participant_email_content'),	'trim|required');						$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();																//if form valid			if($form_is_valid)			{																																											$email_subject = $_POST["subject"];				$email_content = $_POST["content"]; 								//apply template to email content				$this->load->library('parser');							  				$email_content = $this->parser->parse('front/email_forms/template', array("body"=>$email_content), TRUE);							  																							  									//send email				//===========================================================				//load email library											$this->load->library('email');					$this->email->initialize();				$this->email->clear(true);					$this->email->to($_POST['to_email']);												$this->email->from($this->setting->item['email_from'], $this->setting->item['site_name']);													$this->email->reply_to($this->setting->item['email'], $this->setting->item['site_name']);																	$this->email->subject($email_subject);				$this->email->message($email_content);				$this->email->set_alt_message(nl2br(strip_tags($email_content)));										//diploma				$file_name 	= $participant["diploma"];				$file_url 	= file_url()."uploads/competitions/diploma/".$file_name;		        $file_path 	= base_path()."uploads/competitions/diploma/".$file_name;		        if($file_name && file_exists($file_path))		        {			       		$attachment_file_name = str_replace("-".$participant["project_number"],"",$file_name);		       		$this->email->attach($file_path, 'attachment', $attachment_file_name);			        }														if($this->email->send())				{					$data['done_message'] = "S-a trimis cu success";					unset($_POST);				}					else					$data['error_message'] = "Din motive tehnice nu s-a trimis.";								}								}								//send data to view		$data['email_template_id'] 			= $email_template_id;		$data['email_templates'] 			= $email_templates;		$data['participant'] 				= $participant;		$data['competition'] 				= $competition;		$data['body'] 						= 'admin/competitions/send_email';		$this->load->view('admin/template_iframe',$data);			}		function send_email_to_all_participants($competition_id = 0)	{				$data = array();		$this->page_title = $this->lang->line('participant_send_email_to_all_participants');				//get competition		//=========================================================				$where 					= " AND t1.competition_id = '".$competition_id."' 									AND t2.lang_id = ".$this->admin_default_lang_id."									";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) 			die();		$competition 			= $competitions[0];						//daca se face submit la forumar			if(isset($_POST['Send']))		{						//form validation			$this->load->library('form_validation');							$this->form_validation->set_rules('subject',		$this->lang->line('participant_email_subject'),	'trim|required');							$this->form_validation->set_rules('send_to',		" ",			'trim|required');														$this->form_validation->set_rules('attach_file',	" ",			'trim');			$this->form_validation->set_rules('content',		$this->lang->line('participant_email_content'),	'trim|required');						$this->form_validation->set_error_delimiters('<div class="error">','</div>');			$form_is_valid = $this->form_validation->run();																//if form valid			if($form_is_valid)			{																																											//get participants						//=========================================================					$where 				= " AND p.competition_id = '".$competition_id."' ";				if(isset($_POST["send_to"]) && $_POST["send_to"] == "all")					$where 			.= "  ";								elseif(isset($_POST["send_to"]) && $_POST["send_to"] == "without_project")						$where 			.= " AND (project_filename = '' AND project_link_extern = '') ";				elseif(isset($_POST["send_to"]) && $_POST["send_to"] == "with_project")						$where 			.= " AND (project_filename != '' OR project_link_extern != '') ";					else					$where 			.= " AND p.competition_id = 0 ";															$participants 	= $this->competitions_model->get_participants($where);												$email_subject = $_POST["subject"];				$email_content = $_POST["content"]; 								//apply template to email content				$this->load->library('parser');							  				$email_content = $this->parser->parse('front/email_forms/template', array("body"=>$email_content), TRUE);							  																							  									//send email				//===========================================================				//load email library											$this->load->library('email');					$this->email->initialize();									$error_no 		= 0;				$error_message 	= "";								$done_no		= 0;				$done_message  	= "";								foreach($participants as $participant)				{																								$this->email->clear(true);								$this->email->from($this->setting->item['email_from'], $this->setting->item['site_name']);														$this->email->reply_to($this->setting->item['email'], $this->setting->item['site_name']);					$this->email->subject($email_subject);					$this->email->message($email_content);					$this->email->set_alt_message(nl2br(strip_tags($email_content)));									$this->email->to($participant['email']);																															//diploma					if(isset($_POST["attach_file"]))					{						$file_name 	= $participant["diploma"];						$file_url 	= file_url()."uploads/competitions/diploma/".$file_name;				        $file_path 	= base_path()."uploads/competitions/diploma/".$file_name;				        if($file_name && file_exists($file_path))				        {					       		$attachment_file_name = str_replace("-".$participant["project_number"],"",$file_name);				       		$this->email->attach($file_path, 'attachment', $attachment_file_name);					        }					}																if($this->email->send())					{											$done_no++;						$done_message .= "<div class=\"done\">S-a trimis cu success la ".$participant['email']."</div>";					}																		else					{						$error_no++;						$error_message .= "<div class=\"error\">Din motive tehnice nu s-a trimis la ".$participant['email']."</div>";					}										sleep(9);				}									}								}		if(isset($error_message) && $error_message)		{			$data["error_message"] = "<div>Nu s-au trimis ".$error_no." email-uri</div>".$error_message;		}		if(isset($done_message) && $done_message)		{			$data["done_message"] = "<div>S-au trimis ".$done_no." email-uri</div>".$done_message;		}				//send data to view		$data['competition'] 				= $competition;		$data['body'] 						= 'admin/competitions/send_email_to_all_participants';		$this->load->view('admin/template_iframe',$data);			}		function view_diplama($participant_id)	{		$data = array();				$this->lang->load("users",$this->admin_default_lang);		$this->lang->load("general","en");				$this->default_lang_id = 2;				//get participants				//=========================================================			$where 			= " AND competitions_participant_id = '".$participant_id."' ";																						$participants 	= $this->competitions_model->get_participants($where);			if(!$participants) die();		$participant = $participants[0];							//get competition		//=========================================================				$where 					= "AND t1.competition_id = '".$participant["competition_id"]."' 				                   AND t2.lang_id = ".$this->admin_default_lang_id." ";		$competitions 			= $this->competitions_model->get_competitions($where);		if(!$competitions) die();			$competition 			= $competitions[0];				//get prize		//=========================================================				$where 			= " AND lang_id = 2							AND t1.prize_id = '".$participant["prize_id"]."'  ";		$orderby 		= "ORDER BY `order` ASC";		$prizes = $this->competitions_model->get_prizes($where,$orderby,false,false,false);		if($prizes)			$participant["prize"] = $prizes[0];					//get partners		//======================================================		$this->load->model('partners_model');		$where 							= " AND active = '1' AND on_diploma = '1'";		$orderby						= " ORDER BY `order` ASC ";		$fields 						= false;				$data['partners']  				= $this->partners_model->get_partners($where, $orderby, false, false, $fields);								//send data to view		//=========================================================		$data["participant"] 	= $participant;		$data["competition"] 	= $competition;		$data["prizes"] 		= $prizes;					$this->load->view("admin/competitions/view_diplama",$data);		} 			function testing_diploma()	{		$this->lang->load("users",$this->admin_default_lang);				if(isset($_POST["Download"]))		{					//get participant					$participant = array(	"prize" 				=> array(	"certificate" 	=> ($_POST["type"]=="prize"?$_POST["prize"]:"&nbsp;"),																		"type" 			=> $_POST["type"],																		),									"name" 					=> $_POST["name"],									"school" 				=> $_POST["school"],									"city" 				    => $_POST["city"],									"country_name" 			=> "Romania",									"age_category_name" 	=> $_POST["age_category_name"],									"category_name"		 	=> $_POST["category_name"],									"project_number" 		=> $_POST["project_number"],									"project_filename" 		=> "testing",																		 );									 			//get competition					$competition = array(	"name" => $_POST["competition_name"],																 );				//keep settings			$fields = array("prize", "competition_name", "name", "school", "city" , "age_category_name", "category_name", "project_number");			foreach($fields as $field)			{				$type = "diploma";				if($_POST["type"] == "certificate")					$type = "certificate";									$this->db->where(array("name" => "draft_".$type."_".$field));				$this->db->update('settings',array("value" => $_POST[$field]));			}									 								//get partners			//======================================================			$this->load->model('partners_model');			$where 							= " AND active = '1' AND on_diploma = '1'";			$orderby						= " ORDER BY `order` ASC ";			$fields 						= false;					$partners 						= $this->partners_model->get_partners($where, $orderby, false, false, $fields);										//send data to view			//=========================================================			$data 					= array();			$data["participant"] 	= $participant;			$data["competition"] 	= $competition;			$data["partners"] 		= $partners;					$html = $this->load->view("admin/competitions/view_diplama",$data,true);			$html = str_replace(file_url(),base_path(),$html);						//genereaza pdf					require($this->config->item('base_path')."myclasses/dompdf-0.8.3/autoload.inc.php");						$dompdf = new Dompdf\Dompdf();			        $dompdf->load_html($html);	        $dompdf->set_paper('a4', 'landscape');	        $dompdf->set_option( 'dpi' , '300' );			$dompdf->render();			$dompdf->stream("draft.pdf", array("Attachment" => true));					die();		        		} 		//page title		//=========================================================				$this->page_title = $this->lang->line("competition_testing_diploma");					//send data to view		//=========================================================		$data['body'] 	= 'admin/competitions/testing_diploma';		$this->load->view('admin/template_iframe',$data);							}		/**	 * Upload file	 * 	 * @param string $type	 * @param int $competition_id	 */	function upload_diploma_image()	{				$data = array();					//upload form		//=========================================================		$this->lang->load("upload",$this->admin_default_lang);		if(isset($_POST["Upload"]))		{																											//config upload file			$config["upload_path"] 	= $this->config->item("base_path")."images";			$config["allowed_types"]= "jpg";			$config["max_size"]		= "6144";			$config["max_width"] 	= "10000";			$config["max_height"] 	= "10000";			$config["file_name"] 			= $_POST["type"];			$config["file_ext_tolower"] 	= true;						$config["overwrite"] 			= true;						//load upload library			$this->load->library("upload", $config);																																				//if the file has succesfully uploded			if ($this->upload->do_upload("file"))			{				$file_data = $this->upload->data();																								}			else			{				//error message				$data["error_message"] = $this->upload->display_errors("","");									}																								}//end post		//page title		//=========================================================				$this->page_title = $this->lang->line("upload_file");				//send data to view		//=========================================================		$data["body"]  	= "admin/competitions/upload_diploma_image";		$this->load->view("admin/template_iframe",$data);							}		function import_participants_notes($competition_id)	{		set_time_limit(36000);		ini_set('memory_limit','1024M');				$data = array();		$this->page_title = "Importa din XLS notele";		if(isset($_POST['Import']))		{			ini_set('memory_limit','256M');							//config upload file			$this->lang->load('upload',$this->admin_default_lang);			$config['upload_path'] 	= $this->config->item('base_path').'uploads/';			$config['allowed_types']= 'xls|xlsx';			$config['max_size']		= '3072';			$config['file_name'] 	= "import_participants_notes_".date("Y-m-d-h-i-s");			$config['overwrite'] 	= false;			//load upload library			$this->load->library('upload', $config);							//if the file was not succesfully uploded			if(!$this->upload->do_upload('file'))				$data['error_message']=$this->upload->display_errors('','');			else			{				$file_data = $this->upload->data();				$file_path = $config['upload_path'].$file_data['file_name'];				chmod($file_path,0777);											//deschid fisier pt citire				$f = fopen($file_path, "r");								$importat_cu_succes = 0;				$importat_fara_succes = 0;				$error_import = "";								//read file				require_once $this->config->item("base_path").'myclasses/PHPExcel/PHPExcel.php';				$objReader = PHPExcel_IOFactory::createReaderForFile($file_path);				$objReader->setReadDataOnly(true);				$objPHPExcel  = $objReader->load($file_path);				$objWorksheet = $objPHPExcel->getActiveSheet();												foreach ($objWorksheet->getRowIterator() as $x=>$row)				{					$cellIterator = $row->getCellIterator();					$cellIterator->setIterateOnlyExistingCells(false);											$csv_data = array();					foreach($cellIterator as $id=>$cell)						$csv_data[] = $cell->getValue();											$nr_celule = count($csv_data);															//daca e primul rand verifica denumirea coloanelor					if($x==1)					{																	$need_col_number = 5;						if($nr_celule != $need_col_number)							$data['error_message']="In fisierul XLS trebuie sa aveti ".$need_col_number." coloane completate: ID USER, ID CATEGORIE, ID CATEGORIE VARSTA, ID PREMIU, NOTA";						else						{							/*						    $error_cap_tabel = "";							$array_cap_tabel = array("ID USER", "ID CATEGORIE", "ID CATEGORIE VARSTA", "ID PREMIU", "NOTA");														for ($i=0; $i < $nr_celule; $i++)							{								$cell = $csv_data[$i];								if(trim(strtolower($cell)) != strtolower($array_cap_tabel[$i]))								$error_cap_tabel .= "<p>Coloana nr ".($i+1)." trebuie sa ne numeasca ".$array_cap_tabel[$i]."</p>";							}							if($error_cap_tabel != "")							    $data['error_message'] = $error_cap_tabel;							*/    						}					}											else if(!isset($data['error_message']))					{						$values = array();												for ($i=1; $i <= $nr_celule; $i++)						{														if($i==4)							    $values["prize_id"]  = $csv_data[$i-1];							if($i==5)							    $values["note"]      = $csv_data[$i-1];						}						$csv_user_id             = $csv_data[0];						$csv_category_id         = $csv_data[1];						$csv_age_category_id     = $csv_data[2];												$where = "  AND p.competition_id   = '".$competition_id."' 		                            AND p.user_id          = '".$csv_user_id."'                                    AND p.category_id      = '".$csv_category_id."'                                    AND p.age_category_id  = '".$csv_age_category_id."' 		                          ";		    						$participants = $this->competitions_model->get_participants($where);						if(!$participants)						{							$error_import .= "<div>Pe linia ".$x." din XLS nu se poate identifica participantul</div>";							$importat_fara_succes ++;						}						else						{							$participant = $participants[0];																												//update participant							if(count($values))							{								$this->db->where(array('competitions_participant_id' => $participant["competitions_participant_id"]));								$this->db->update(' competitions_participants',$values);																$importat_cu_succes ++;									}																				else							{								$error_import .= "<div>Linia ".$x." din fisier nu s-a putut importa, datele nu au putut fi identificate</div>";								$importat_fara_succes ++;							}												}					}					$x++;				}				fclose($f);												//sterg fisier				if(file_exists($file_path))					unlink($file_path);				if($importat_cu_succes > 0)				{					$where = "  AND p.competition_id   = '".$competition_id."' ";	    					$participants = $this->competitions_model->get_participants($where, false, false, false, "diploma, competitions_participant_id");										    foreach($participants as $participant)    				{    					//remove diploma    					$file_name = $participant["diploma"];    		            $file_path = base_path()."uploads/competitions/diploma/".$file_name;    		            if($file_name && file_exists($file_path))    		            {    		               	chmod($file_path, 0755);    		    			unlink($file_path);    		    			    		    			$values = array();    		    			$values["diploma"] = "";    		    			$this->competitions_model->edit_participant($values, $participant["competitions_participant_id"]);	    		            }	            																					                					    										    				}    				    				//update competition    				$values = array(	"save_notes_date" => date("Y-m-d H:i:s"));    				$this->competitions_model->edit_competition($values, false, $competition_id);				    				    $data['done_message'] 	= 'S-au actualizat cu succes notele a '.$importat_cu_succes.' participanti.';				    				    $_SESSION["done_message"] = $data['done_message'];				    				    //redirect					?><script type="text/javascript" language="javascript">														parent.jQuery.fancybox.close();					window.parent.location.reload();																</script><?php						die();					}				if($importat_fara_succes > 0)					$data['error_message'] 	= '<div>S-au gasit erori la import la '.$importat_fara_succes.' linii</div>'."$error_import";																}					}		//send data to view		//=========================================================		$data["body"]  	= "admin/competitions/import_participants_notes";		$this->load->view("admin/template_iframe",$data);	}		/**	 * Set search session	 * 	 * @param string $section				 * @param string $search_field			 * @param string $search_value	 */	function set_search_session($section, $search_field, $search_value)	{					//set search session		$_SESSION[$section]['search_by'][$search_field] = urldecode($search_value);					header("Location: ".admin_url().$section);				}			/**	 * Set session	 * 	 * @param string $section 		$section is name of controller	 * @param string $type			$type can be "sort" or "per_page"	 * @param string $parameters	$parameters contains multiples parameters separated by "-"		 */	function set_session($section, $type, $parameters = false)	{				// set sort session				if($type == "sort")		{									$parameters = str_replace("___",".",$parameters);			$parameters = explode("-",$parameters);						$field = $parameters[0];			$order = $parameters[1];						$_SESSION[$section]["sort_field"] = $field;									$_SESSION[$section]["sort_order"] = $order;						?><script type="text/javascript" language="javascript">					window.history.go(-1);														</script><?php					}					// set items_per_page session		if($type == "per_page")		{						$per_page = $parameters;									$_SESSION[$section]["per_page"] = $per_page;				header("Location: ".admin_url().$section);						}			}}